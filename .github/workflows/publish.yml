name: Publish

on:
  push:
    branches:
      - main

jobs:
  build-publish-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry lock
        poetry install

    - name: Build the package
      run: poetry build

    - name: Get the current version
      id: get_version
      run: |
        VERSION=$(poetry version -s)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check if tag exists and create a new one
      id: check_tag
      run: |
        VERSION=$(poetry version -s)
        git fetch --tags
        if git tag -l | grep -q "v$VERSION"; then
          echo "Tag v$VERSION already exists, incrementing version"
          VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$NF++; print $0}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "new_version=true" >> $GITHUB_ENV
        else
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "new_version=false" >> $GITHUB_ENV
        fi

    - name: Tag the commit with version (if new version)
      if: env.new_version == 'true'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git tag "v$VERSION"
        git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/pavelixo/krieg.git
        git push origin "v$VERSION"

    - name: Create a new release (if new version)
      if: env.new_version == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v$VERSION"
        name: "Release v$VERSION"
        files: |
          dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
